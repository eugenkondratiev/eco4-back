#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('eco4-express:server');
var http = require('http');
require('dotenv').config()
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3005');
var wsport = normalizePort(process.env.WSPORT || '8083');

// const HOSTNAME =  process.env.HOST || 'localhost' ;
//178.158.238.89
const HOSTNAME = process.env.HOST || '192.168.1.188' || 'localhost';

app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);



const mainPoll = require('../public/javascripts/controller/modbus-poll');
setTimeout(async () => {
  try {
    console.log("update params test");
    const params45 = await require('../public/javascripts/model/update-ai-params')();
    // console.log("params45", params45);
    maindata.blr4.params = [...params45.prm4]
    maindata.t5.params = [...params45.prm5]
    maindata.blr1.params = [...params45.prm1]
    maindata.blr2.params = [...params45.prm2]
    maindata.el.params = [...params45.prmEl]
    // console.log("update params maindata  - ", maindata);
  } catch (error) {

  }
}, 100)
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, HOSTNAME);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on ' + bind);
  console.log(JSON.stringify(addr, null, " "));
}

setTimeout(() => {
  mainPoll(server).catch((e) => {
    console.log("mainPoll ###", e.message);
  })
}, 2000)